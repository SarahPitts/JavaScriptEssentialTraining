	JavaScript is written as plain text, like HTML and our CSS, and JavaScript is what's called an interpreted language, not a compiled language. A lot of other languages need to be run through a special program called a compiler that takes your code, converts it into machine code, which can then run on the operating system, but we don't need to do that with JavaScript. We simply write our code and we hand it over to the web browser, and the web browser takes care all interpreting it and running it on the machine. 
	Now, JavaScript is case sensitive. Let me repeat that. JavaScript is case sensitive! If you're coming from a case-insensitive language, like Visual Basic or Pascal or even old-school HTML, you may want to write that down and stick it in front of your face for a while, because it's really important. Now this is often a challenge for web designers coming from years of handwriting HTML, where, okay, it's good practice to be consistent, but really if you open a lowercase p tag and close with an uppercase P tag, it doesn't really matter. Well, it matters here. One will work; the other will not. Mix up the case in a JavaScript keyword and it will not guess. It will not assume what you meant. It just won't work. JavaScript will let you be a little sloppy in some other areas, but case sensitivity is not one of them. 
	Now JavaScript code, like in most programming languages, is grouped into statements, separate instructions or commands to say piece by piece what you want your script to do, perhaps change the color of the piece of text, calculate someone's age, move an image five pixels to the left, make a menu option disappear or appear, or pop up an alert message. 
	A JavaScript statement is typically written by itself on one line. In the same way that you might use a period or a full stop, to finish a sentence in English, each JavaScript statement should end with a semicolon. Now because of this, you can put multiple statements on one line, just separating each of them with the semicolon, but don't do this--it makes it harder to read, split multiple statements onto multiple lines. In fact, what's more likely is the opposite situation where if you have a really, really, really long statement, you can split that across multiple lines to make it easier to read, marking the end of the full statement with a semicolon, but most of the time one statement, one line. 
	Now, JavaScript is a forgiving language about some things. That might sound like a good thing, but it really isn't. If you're familiar with HTML, you know you can forget to close a tag and most of the time the page would still work, but you know this ends up being a bad thing, because it leads to sloppy code, and it leads to browsers trying to guess what you meant and often different browsers doing different things with that guess. Now the equivalent here is that in many cases your JavaScript statement would still work if you left off the semicolon, but don't. Let's just imagine it's required, because if you're casual about it, you will run into problems. So we'll always be conscious of using the semicolon to finish a statement. 
	A JavaScript might be case sensitive, but it's not sensitive to spaces or line returns between different pieces of the language. So if I have the statement "Hello world," I could also write it like this with a lot of spaces between the different pieces of the statement. I could even split it onto different lines. You can typically use however many spaces or line breaks make it readable to you, but the only place spaces do matter is inside the double quotes, because it then assumes that we want to write out Hello, space, space, space world. But other than this, and other than the idea that you can't put a space in the middle of a word, JavaScript really doesn't care. 
	Now as you're writing code, it's useful to add comments, so you can add comments to your JavaScript by simply typing a line with two forward slashes both together. This is like other C-based languages. JavaScript then ignores anything after the two forward slashes and begins again on the next line. Now, typically you add comments on the line above the one they're referring to, but you can also add them at the end of statement as well, and they will be ignored there. You can also comment out multiple lines by typing a forward slash asterisk, and everything after that is considered a comment, even if it's a hundred lines later, until you see the flip side, the asterisk forward slash. Now I only tend to use this to comment out large chunks of code when testing; everywhere else I use the single-line style. It's a bit more obvious. 
	Now like most programming languages, the default behavior when JavaScript runs is to start at the first statement and move down, executing each statement one by one. And the question is, when? And unless you say otherwise, it's as soon as the browser sees your code, and that can have very interesting implications, because we can put the script tags just about anywhere in our HTML. 
We can put it in the head section, in the body section, in the middle.  The position of your JavaScript in your page really does matter, but by default it will be interpreted and executed as soon as the browser sees it. Now, okay, on a simple page that's fine, but of course we don't always want to run everything immediately. Okay, sometimes we want to run the code when the page loads, but sometimes not till the user fills out a form, or moves their mouse, or hits the Tab key. And we'll do that, as in most languages, by grouping our code into separate self-contained pieces and then telling the browser we only want to run them in response to certain events.